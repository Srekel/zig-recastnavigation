// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

extern const _1_DT_TILECACHE_MAGIC_: *const c_int;
pub const DT_TILECACHE_MAGIC = _1_DT_TILECACHE_MAGIC_;

extern const _1_DT_TILECACHE_VERSION_: *const c_int;
pub const DT_TILECACHE_VERSION = _1_DT_TILECACHE_VERSION_;

extern const _1_DT_TILECACHE_NULL_AREA_: *const u8;
pub const DT_TILECACHE_NULL_AREA = _1_DT_TILECACHE_NULL_AREA_;

extern const _1_DT_TILECACHE_WALKABLE_AREA_: *const u8;
pub const DT_TILECACHE_WALKABLE_AREA = _1_DT_TILECACHE_WALKABLE_AREA_;

extern const _1_DT_TILECACHE_NULL_IDX_: *const c_ushort;
pub const DT_TILECACHE_NULL_IDX = _1_DT_TILECACHE_NULL_IDX_;

pub const dtTileCacheLayerHeader = extern struct {
    /// Data magic
    magic: c_int,
    /// Data version
    version: c_int,
    tx: c_int,
    ty: c_int,
    tlayer: c_int,
    bmin: [3]f32,
    bmax: [3]f32,
    /// Height min/max range
    hmin: c_ushort,
    /// Height min/max range
    hmax: c_ushort,
    /// Dimension of the layer.
    width: u8,
    /// Dimension of the layer.
    height: u8,
    /// Usable sub-region.
    minx: u8,
    /// Usable sub-region.
    maxx: u8,
    /// Usable sub-region.
    miny: u8,
    /// Usable sub-region.
    maxy: u8,
};

pub const dtTileCacheLayer = extern struct {
    header: [*c]dtTileCacheLayerHeader,
    /// Region count.
    regCount: u8,
    heights: [*c]u8,
    areas: [*c]u8,
    cons: [*c]u8,
    regs: [*c]u8,
};

pub const dtTileCacheContour = extern struct {
    nverts: c_int,
    verts: [*c]u8,
    reg: u8,
    area: u8,
};

pub const dtTileCacheContourSet = extern struct {
    nconts: c_int,
    conts: [*c]dtTileCacheContour,
};

pub const dtTileCachePolyMesh = extern struct {
    nvp: c_int,
    /// Number of vertices.
    nverts: c_int,
    /// Number of polygons.
    npolys: c_int,
    /// Vertices of the mesh, 3 elements per vertex.
    verts: [*c]c_ushort,
    /// Polygons of the mesh, nvp*2 elements per polygon.
    polys: [*c]c_ushort,
    /// Per polygon flags.
    flags: [*c]c_ushort,
    /// Area ID of polygons.
    areas: [*c]u8,
};

pub const dtTileCacheAlloc = extern struct {
    vtable: *const anyopaque,

    extern fn _1_dtTileCacheAlloc_deinit_(self: *dtTileCacheAlloc) void;
    pub const deinit = _1_dtTileCacheAlloc_deinit_;

    pub fn reset(self: *dtTileCacheAlloc) void {
        _ = self;
    }
    // syntax errors:
    // pub fn free(self: *dtTileCacheAlloc, ptr: ?*anyopaque) void {
    // ;
    // }
    //
};

pub const dtTileCacheCompressor = extern struct {
    vtable: *const anyopaque,

    extern fn _1_dtTileCacheCompressor_deinit_(self: *dtTileCacheCompressor) void;
    pub const deinit = _1_dtTileCacheCompressor_deinit_;

    extern fn _1_dtTileCacheCompressor_maxCompressedSize_(self: *dtTileCacheCompressor, bufferSize: c_int) c_int;
    pub const maxCompressedSize = _1_dtTileCacheCompressor_maxCompressedSize_;
};

extern fn _1_dtFreeTileCacheLayer_(alloc: [*c]dtTileCacheAlloc, layer: [*c]dtTileCacheLayer) void;
pub const dtFreeTileCacheLayer = _1_dtFreeTileCacheLayer_;

extern fn _1_dtAllocTileCacheContourSet_(alloc: [*c]dtTileCacheAlloc) [*c]dtTileCacheContourSet;
pub const dtAllocTileCacheContourSet = _1_dtAllocTileCacheContourSet_;

extern fn _1_dtFreeTileCacheContourSet_(alloc: [*c]dtTileCacheAlloc, cset: [*c]dtTileCacheContourSet) void;
pub const dtFreeTileCacheContourSet = _1_dtFreeTileCacheContourSet_;

extern fn _1_dtAllocTileCachePolyMesh_(alloc: [*c]dtTileCacheAlloc) [*c]dtTileCachePolyMesh;
pub const dtAllocTileCachePolyMesh = _1_dtAllocTileCachePolyMesh_;

extern fn _1_dtFreeTileCachePolyMesh_(alloc: [*c]dtTileCacheAlloc, lmesh: [*c]dtTileCachePolyMesh) void;
pub const dtFreeTileCachePolyMesh = _1_dtFreeTileCachePolyMesh_;

extern fn _1_dtTileCacheHeaderSwapEndian_(data: [*c]u8, dataSize: c_int) bool;
/// Swaps the endianess of the compressed tile data's header (#dtTileCacheLayerHeader).
/// Tile layer data does not need endian swapping as it consist only of bytes.
///  @param[in,out] data 		The tile data array.
///  @param[in] dataSize 	The size of the data array.
pub const dtTileCacheHeaderSwapEndian = _1_dtTileCacheHeaderSwapEndian_;

pub extern fn getCopyCompressor() [*c]dtTileCacheCompressor;
pub extern fn getDefaultAlloc() [*c]dtTileCacheAlloc;
