// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

const DetourNavMesh = @import("../../Detour/Include//DetourNavMesh.zig");
const DetourNavMeshQuery = @import("../../Detour/Include//DetourNavMeshQuery.zig");
const dtPolyRef = DetourNavMesh.dtPolyRef;
const dtNavMeshQuery = DetourNavMeshQuery.dtNavMeshQuery;
const dtQueryFilter = DetourNavMeshQuery.dtQueryFilter;

/// Represents a dynamic polygon corridor used to plan agent movement.
/// @UntranspiledVerbatimLineCommentCommand crowd, detour
pub const dtPathCorridor = extern struct {
    m_pos: [3]f32,
    m_target: [3]f32,
    m_path: [*c]dtPolyRef,
    m_npath: c_int,
    m_maxPath: c_int,

    extern fn _1_dtPathCorridor_init_(self: *dtPathCorridor) void;
    pub const init = _1_dtPathCorridor_init_;

    extern fn _1_dtPathCorridor_deinit_(self: *dtPathCorridor) void;
    pub const deinit = _1_dtPathCorridor_deinit_;

    extern fn _2_dtPathCorridor_init_(self: *dtPathCorridor, maxPath: c_int) bool;
    /// Allocates the corridor's path buffer.
    ///  @param[in] maxPath 		The maximum path size the corridor can handle.
    /// @see True if the initialization succeeded.
    pub const init__Overload2 = _2_dtPathCorridor_init_;

    extern fn _1_dtPathCorridor_reset_(self: *dtPathCorridor, ref: dtPolyRef, pos: [*c]const f32) void;
    /// Resets the path corridor to the specified position.
    ///  @param[in] ref 		The polygon reference containing the position.
    ///  @param[in] pos 		The new position in the corridor. [(x, y, z)]
    pub const reset = _1_dtPathCorridor_reset_;

    extern fn _1_dtPathCorridor_findCorners_(self: *dtPathCorridor, cornerVerts: [*c]f32, cornerFlags: [*c]u8, cornerPolys: [*c]dtPolyRef, maxCorners: c_int, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) c_int;
    /// Finds the corners in the corridor from the position toward the target. (The straightened path.)
    ///  @param[out] cornerVerts 		The corner vertices. [(x, y, z) * cornerCount] [Size:
    ///<
    ///= maxCorners]
    ///  @param[out] cornerFlags 		The flag for each corner. [(flag) * cornerCount] [Size:
    ///<
    ///= maxCorners]
    ///  @param[out] cornerPolys 		The polygon reference for each corner. [(polyRef) * cornerCount]
    ///  								[Size:
    ///<
    ///=
    ///@p
    ///  @param[in] maxCorners 		The maximum number of corners the buffers can hold.
    ///  @param[in] navquery 		The query object used to build the corridor.
    ///  @param[in] filter 			The filter to apply to the operation.
    /// @see The number of corners returned in the corner buffers. [0
    ///<
    ///= value
    ///<
    ///=
    ///@p
    pub const findCorners = _1_dtPathCorridor_findCorners_;

    extern fn _1_dtPathCorridor_optimizePathVisibility_(self: *dtPathCorridor, next: [*c]const f32, pathOptimizationRange: f32, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) void;
    /// Attempts to optimize the path if the specified point is visible from the current position.
    ///  @param[in] next 					The point to search toward. [(x, y, z])
    ///  @param[in] pathOptimizationRange 	The maximum range to search. [Limit: > 0]
    ///  @param[in] navquery 				The query object used to build the corridor.
    ///  @param[in] filter 					The filter to apply to the operation.
    pub const optimizePathVisibility = _1_dtPathCorridor_optimizePathVisibility_;

    extern fn _1_dtPathCorridor_optimizePathTopology_(self: *dtPathCorridor, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) bool;
    /// Attempts to optimize the path using a local area search. (Partial replanning.)
    ///  @param[in] navquery 	The query object used to build the corridor.
    ///  @param[in] filter 		The filter to apply to the operation.
    pub const optimizePathTopology = _1_dtPathCorridor_optimizePathTopology_;

    extern fn _1_dtPathCorridor_moveOverOffmeshConnection_(self: *dtPathCorridor, offMeshConRef: dtPolyRef, refs: [*c]dtPolyRef, startPos: [*c]f32, endPos: [*c]f32, navquery: [*c]dtNavMeshQuery) bool;
    pub const moveOverOffmeshConnection = _1_dtPathCorridor_moveOverOffmeshConnection_;

    extern fn _1_dtPathCorridor_fixPathStart_(self: *dtPathCorridor, safeRef: dtPolyRef, safePos: [*c]const f32) bool;
    pub const fixPathStart = _1_dtPathCorridor_fixPathStart_;

    extern fn _1_dtPathCorridor_trimInvalidPath_(self: *dtPathCorridor, safeRef: dtPolyRef, safePos: [*c]const f32, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) bool;
    pub const trimInvalidPath = _1_dtPathCorridor_trimInvalidPath_;

    extern fn _1_dtPathCorridor_isValid_(self: *dtPathCorridor, maxLookAhead: c_int, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) bool;
    /// Checks the current corridor path to see if its polygon references remain valid.
    ///  @param[in] maxLookAhead 	The number of polygons from the beginning of the corridor to search.
    ///  @param[in] navquery 		The query object used to build the corridor.
    ///  @param[in] filter 			The filter to apply to the operation.
    pub const isValid = _1_dtPathCorridor_isValid_;

    extern fn _1_dtPathCorridor_movePosition_(self: *dtPathCorridor, npos: [*c]const f32, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) bool;
    /// Moves the position from the current location to the desired location, adjusting the corridor
    /// as needed to reflect the change.
    ///  @param[in] npos 		The desired new position. [(x, y, z)]
    ///  @param[in] navquery 	The query object used to build the corridor.
    ///  @param[in] filter 		The filter to apply to the operation.
    /// @see Returns true if move succeeded.
    pub const movePosition = _1_dtPathCorridor_movePosition_;

    extern fn _1_dtPathCorridor_moveTargetPosition_(self: *dtPathCorridor, npos: [*c]const f32, navquery: [*c]dtNavMeshQuery, filter: [*c]const dtQueryFilter) bool;
    /// Moves the target from the curent location to the desired location, adjusting the corridor
    /// as needed to reflect the change.
    ///  @param[in] npos 		The desired new target position. [(x, y, z)]
    ///  @param[in] navquery 	The query object used to build the corridor.
    ///  @param[in] filter 		The filter to apply to the operation.
    /// @see Returns true if move succeeded.
    pub const moveTargetPosition = _1_dtPathCorridor_moveTargetPosition_;

    extern fn _1_dtPathCorridor_setCorridor_(self: *dtPathCorridor, target: [*c]const f32, polys: [*c]const dtPolyRef, npath: c_int) void;
    /// Loads a new path and target into the corridor.
    ///  @param[in] target 		The target location within the last polygon of the path. [(x, y, z)]
    ///  @param[in] path 		The path corridor. [(polyRef) *
    ///@p
    ///  @param[in] npath 		The number of polygons in the path.
    pub const setCorridor = _1_dtPathCorridor_setCorridor_;

    extern fn _1_dtPathCorridor_getPos_(self: *const dtPathCorridor) [*c]const f32;
    /// Gets the current position within the corridor. (In the first polygon.)
    /// @see The current position within the corridor.
    pub const getPos = _1_dtPathCorridor_getPos_;

    extern fn _1_dtPathCorridor_getTarget_(self: *const dtPathCorridor) [*c]const f32;
    /// Gets the current target within the corridor. (In the last polygon.)
    /// @see The current target within the corridor.
    pub const getTarget = _1_dtPathCorridor_getTarget_;

    extern fn _1_dtPathCorridor_getFirstPoly_(self: *const dtPathCorridor) dtPolyRef;
    /// The polygon reference id of the first polygon in the corridor, the polygon containing the position.
    /// @see The polygon reference id of the first polygon in the corridor. (Or zero if there is no path.)
    pub const getFirstPoly = _1_dtPathCorridor_getFirstPoly_;

    extern fn _1_dtPathCorridor_getLastPoly_(self: *const dtPathCorridor) dtPolyRef;
    /// The polygon reference id of the last polygon in the corridor, the polygon containing the target.
    /// @see The polygon reference id of the last polygon in the corridor. (Or zero if there is no path.)
    pub const getLastPoly = _1_dtPathCorridor_getLastPoly_;

    extern fn _1_dtPathCorridor_getPath_(self: *const dtPathCorridor) [*c]const dtPolyRef;
    /// The corridor's path.
    /// @see The corridor's path. [(polyRef) * #getPathCount()]
    pub const getPath = _1_dtPathCorridor_getPath_;

    extern fn _1_dtPathCorridor_getPathCount_(self: *const dtPathCorridor) c_int;
    /// The number of polygons in the current corridor path.
    /// @see The number of polygons in the current corridor path.
    pub const getPathCount = _1_dtPathCorridor_getPathCount_;
};

extern fn _1_dtMergeCorridorStartMoved_(path: [*c]dtPolyRef, npath: c_int, maxPath: c_int, visited: [*c]const dtPolyRef, nvisited: c_int) c_int;
pub const dtMergeCorridorStartMoved = _1_dtMergeCorridorStartMoved_;

extern fn _1_dtMergeCorridorEndMoved_(path: [*c]dtPolyRef, npath: c_int, maxPath: c_int, visited: [*c]const dtPolyRef, nvisited: c_int) c_int;
pub const dtMergeCorridorEndMoved = _1_dtMergeCorridorEndMoved_;

extern fn _1_dtMergeCorridorStartShortcut_(path: [*c]dtPolyRef, npath: c_int, maxPath: c_int, visited: [*c]const dtPolyRef, nvisited: c_int) c_int;
pub const dtMergeCorridorStartShortcut = _1_dtMergeCorridorStartShortcut_;
