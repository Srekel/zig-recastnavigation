// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

const dtStatus = u32;
const dtPolyRef = c_uint;
const dtMeshTile = anyopaque;
const dtPoly = anyopaque;
const dtNavMesh = anyopaque;

/// Defines polygon filtering and traversal costs for navigation mesh query operations.
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtQueryFilter = extern struct {
    /// Cost per area type. (Used by default implementation.)
    m_areaCost: [64]f32,
    /// Flags for polygons that can be visited. (Used by default implementation.)
    m_includeFlags: c_ushort,
    /// Flags for polygons that should not be visited. (Used by default implementation.)
    m_excludeFlags: c_ushort,

    extern fn _1_dtQueryFilter_init_(self: *dtQueryFilter) void;
    pub const init = _1_dtQueryFilter_init_;

    extern fn _1_dtQueryFilter_passFilter_(self: *const dtQueryFilter, ref: dtPolyRef, tile: [*c]const dtMeshTile, poly: [*c]const dtPoly) bool;
    pub const passFilter = _1_dtQueryFilter_passFilter_;

    extern fn _1_dtQueryFilter_getCost_(self: *const dtQueryFilter, pa: [*c]const f32, pb: [*c]const f32, prevRef: dtPolyRef, prevTile: [*c]const dtMeshTile, prevPoly: [*c]const dtPoly, curRef: dtPolyRef, curTile: [*c]const dtMeshTile, curPoly: [*c]const dtPoly, nextRef: dtPolyRef, nextTile: [*c]const dtMeshTile, nextPoly: [*c]const dtPoly) f32;
    pub const getCost = _1_dtQueryFilter_getCost_;

    extern fn _1_dtQueryFilter_getAreaCost_(self: *const dtQueryFilter, i: c_int) f32;
    /// Returns the traversal cost of the area.
    ///  @param[in] i 		The id of the area.
    /// @see The traversal cost of the area.
    pub const getAreaCost = _1_dtQueryFilter_getAreaCost_;

    extern fn _1_dtQueryFilter_setAreaCost_(self: *dtQueryFilter, i: c_int, cost: f32) void;
    /// Sets the traversal cost of the area.
    ///  @param[in] i 		The id of the area.
    ///  @param[in] cost 	The new cost of traversing the area.
    pub const setAreaCost = _1_dtQueryFilter_setAreaCost_;

    extern fn _1_dtQueryFilter_getIncludeFlags_(self: *const dtQueryFilter) c_ushort;
    /// Returns the include flags for the filter.
    /// Any polygons that include one or more of these flags will be
    /// included in the operation.
    pub const getIncludeFlags = _1_dtQueryFilter_getIncludeFlags_;

    extern fn _1_dtQueryFilter_setIncludeFlags_(self: *dtQueryFilter, flags: c_ushort) void;
    /// Sets the include flags for the filter.
    /// @param[in] flags 	The new flags.
    pub const setIncludeFlags = _1_dtQueryFilter_setIncludeFlags_;

    extern fn _1_dtQueryFilter_getExcludeFlags_(self: *const dtQueryFilter) c_ushort;
    /// Returns the exclude flags for the filter.
    /// Any polygons that include one ore more of these flags will be
    /// excluded from the operation.
    pub const getExcludeFlags = _1_dtQueryFilter_getExcludeFlags_;

    extern fn _1_dtQueryFilter_setExcludeFlags_(self: *dtQueryFilter, flags: c_ushort) void;
    /// Sets the exclude flags for the filter.
    /// @param[in] flags 		The new flags.
    pub const setExcludeFlags = _1_dtQueryFilter_setExcludeFlags_;
};

/// Provides information about raycast hit
/// filled by dtNavMeshQuery::raycast
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtRaycastHit = extern struct {
    /// The hit parameter. (FLT_MAX if no wall hit.)
    t: f32,
    /// hitNormal	The normal of the nearest wall hit. [(x, y, z)]
    hitNormal: [3]f32,
    /// The index of the edge on the final polygon where the wall was hit.
    hitEdgeIndex: c_int,
    /// Pointer to an array of reference ids of the visited polygons. [opt]
    path: [*c]dtPolyRef,
    /// The number of visited polygons. [opt]
    pathCount: c_int,
    /// The maximum number of polygons the
    ///@p
    /// array can hold.
    maxPath: c_int,
    ///  The cost of the path until hit.
    pathCost: f32,
};

/// Provides custom polygon query behavior.
/// Used by dtNavMeshQuery::queryPolygons.
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtPolyQuery = extern struct {
    vtable: *const anyopaque,

    extern fn _1_dtPolyQuery_deinit_(self: *dtPolyQuery) void;
    pub const deinit = _1_dtPolyQuery_deinit_;

    extern fn _1_dtPolyQuery_process_(self: *dtPolyQuery, tile: [*c]const dtMeshTile, polys: [*c][*c]dtPoly, refs: [*c]dtPolyRef, count: c_int) void;
    /// Called for each batch of unique polygons touched by the search area in dtNavMeshQuery::queryPolygons.
    /// This can be called multiple times for a single query.
    pub const process = _1_dtPolyQuery_process_;
};

/// Provides the ability to perform pathfinding related queries against
/// a navigation mesh.
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtNavMeshQuery = extern struct {
    /// Pointer to navmesh data.
    m_nav: [*c]const dtNavMesh,
    /// Sliced query state.
    m_query: dtQueryData,
    /// Pointer to small node pool.
    m_tinyNodePool: [*c]dtNodePool,
    /// Pointer to node pool.
    m_nodePool: [*c]dtNodePool,
    /// Pointer to open list queue.
    m_openList: [*c]dtNodeQueue,

    extern fn _1_dtNavMeshQuery_init_(self: *dtNavMeshQuery) void;
    pub const init = _1_dtNavMeshQuery_init_;

    extern fn _1_dtNavMeshQuery_deinit_(self: *dtNavMeshQuery) void;
    pub const deinit = _1_dtNavMeshQuery_deinit_;

    extern fn _2_dtNavMeshQuery_init_(self: *dtNavMeshQuery, nav: [*c]const dtNavMesh, maxNodes: c_int) dtStatus;
    /// Initializes the query object.
    ///  @param[in] nav 			Pointer to the dtNavMesh object to use for all queries.
    ///  @param[in] maxNodes 	Maximum number of search nodes. [Limits: 0
    ///<
    /// value
    ///<
    ///= 65535]
    /// @see The status flags for the query.
    pub const init__Overload2 = _2_dtNavMeshQuery_init_;

    extern fn _1_dtNavMeshQuery_findPath_(self: *const dtNavMeshQuery, startRef: dtPolyRef, endRef: dtPolyRef, startPos: [*c]const f32, endPos: [*c]const f32, filter: [*c]const dtQueryFilter, path: [*c]dtPolyRef, pathCount: [*c]c_int, maxPath: c_int) dtStatus;
    /// Finds a path from the start polygon to the end polygon.
    ///  @param[in] startRef 	The reference id of the start polygon.
    ///  @param[in] endRef 		The reference id of the end polygon.
    ///  @param[in] startPos 	A position within the start polygon. [(x, y, z)]
    ///  @param[in] endPos 		A position within the end polygon. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[out] path 		An ordered list of polygon references representing the path. (Start to end.)
    ///  							[(polyRef) *
    ///@p
    ///  @param[out] pathCount 	The number of polygons returned in the
    ///@p
    /// array.
    ///  @param[in] maxPath 		The maximum number of polygons the
    ///@p
    /// array can hold. [Limit: >= 1]
    pub const findPath = _1_dtNavMeshQuery_findPath_;

    extern fn _1_dtNavMeshQuery_findStraightPath_(self: *const dtNavMeshQuery, startPos: [*c]const f32, endPos: [*c]const f32, path: [*c]const dtPolyRef, pathSize: c_int, straightPath: [*c]f32, straightPathFlags: [*c]u8, straightPathRefs: [*c]dtPolyRef, straightPathCount: [*c]c_int, maxStraightPath: c_int, options: c_int) dtStatus;
    /// Finds the straight path from the start to the end position within the polygon corridor.
    ///  @param[in] startPos 			Path start position. [(x, y, z)]
    ///  @param[in] endPos 				Path end position. [(x, y, z)]
    ///  @param[in] path 				An array of polygon references that represent the path corridor.
    ///  @param[in] pathSize 			The number of polygons in the
    ///@p
    /// array.
    ///  @param[out] straightPath 		Points describing the straight path. [(x, y, z) *
    ///@p
    ///  @param[out] straightPathFlags 	Flags describing each point. (See: #dtStraightPathFlags) [opt]
    ///  @param[out] straightPathRefs 	The reference id of the polygon that is being entered at each point. [opt]
    ///  @param[out] straightPathCount 	The number of points in the straight path.
    ///  @param[in] maxStraightPath 		The maximum number of points the straight path arrays can hold.  [Limit: > 0]
    ///  @param[in] options 				Query options. (see: #dtStraightPathOptions)
    /// @see The status flags for the query.
    pub fn findStraightPath(
        self: *const dtNavMeshQuery,
        startPos: [*c]const f32,
        endPos: [*c]const f32,
        path: [*c]const dtPolyRef,
        pathSize: c_int,
        straightPath: [*c]f32,
        straightPathFlags: [*c]u8,
        straightPathRefs: [*c]dtPolyRef,
        straightPathCount: [*c]c_int,
        maxStraightPath: c_int,
        __opt: struct {
            options: c_int = 0,
        },
    ) dtStatus {
        return _1_dtNavMeshQuery_findStraightPath_(self, startPos, endPos, path, pathSize, straightPath, straightPathFlags, straightPathRefs, straightPathCount, maxStraightPath, __opt.options);
    }

    extern fn _1_dtNavMeshQuery_initSlicedFindPath_(self: *dtNavMeshQuery, startRef: dtPolyRef, endRef: dtPolyRef, startPos: [*c]const f32, endPos: [*c]const f32, filter: [*c]const dtQueryFilter, options: c_uint) dtStatus;
    /// Initializes a sliced path query.
    ///  @param[in] startRef 	The reference id of the start polygon.
    ///  @param[in] endRef 		The reference id of the end polygon.
    ///  @param[in] startPos 	A position within the start polygon. [(x, y, z)]
    ///  @param[in] endPos 		A position within the end polygon. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[in] options 		query options (see: #dtFindPathOptions)
    /// @see The status flags for the query.
    pub fn initSlicedFindPath(
        self: *dtNavMeshQuery,
        startRef: dtPolyRef,
        endRef: dtPolyRef,
        startPos: [*c]const f32,
        endPos: [*c]const f32,
        filter: [*c]const dtQueryFilter,
        __opt: struct {
            options: c_uint = @as(c_uint, @intCast(0)),
        },
    ) dtStatus {
        return _1_dtNavMeshQuery_initSlicedFindPath_(self, startRef, endRef, startPos, endPos, filter, __opt.options);
    }

    extern fn _1_dtNavMeshQuery_updateSlicedFindPath_(self: *dtNavMeshQuery, maxIter: c_int, doneIters: [*c]c_int) dtStatus;
    /// Updates an in-progress sliced path query.
    ///  @param[in] maxIter 		The maximum number of iterations to perform.
    ///  @param[out] doneIters 	The actual number of iterations completed. [opt]
    /// @see The status flags for the query.
    pub const updateSlicedFindPath = _1_dtNavMeshQuery_updateSlicedFindPath_;

    extern fn _1_dtNavMeshQuery_finalizeSlicedFindPath_(self: *dtNavMeshQuery, path: [*c]dtPolyRef, pathCount: [*c]c_int, maxPath: c_int) dtStatus;
    /// Finalizes and returns the results of a sliced path query.
    ///  @param[out] path 		An ordered list of polygon references representing the path. (Start to end.)
    ///  							[(polyRef) *
    ///@p
    ///  @param[out] pathCount 	The number of polygons returned in the
    ///@p
    /// array.
    ///  @param[in] maxPath 		The max number of polygons the path array can hold. [Limit: >= 1]
    /// @see The status flags for the query.
    pub const finalizeSlicedFindPath = _1_dtNavMeshQuery_finalizeSlicedFindPath_;

    extern fn _1_dtNavMeshQuery_finalizeSlicedFindPathPartial_(self: *dtNavMeshQuery, existing: [*c]const dtPolyRef, existingSize: c_int, path: [*c]dtPolyRef, pathCount: [*c]c_int, maxPath: c_int) dtStatus;
    /// Finalizes and returns the results of an incomplete sliced path query, returning the path to the furthest
    /// polygon on the existing path that was visited during the search.
    ///  @param[in] existing 		An array of polygon references for the existing path.
    ///  @param[in] existingSize 	The number of polygon in the
    ///@p
    /// array.
    ///  @param[out] path 			An ordered list of polygon references representing the path. (Start to end.)
    ///  								[(polyRef) *
    ///@p
    ///  @param[out] pathCount 		The number of polygons returned in the
    ///@p
    /// array.
    ///  @param[in] maxPath 			The max number of polygons the
    ///@p
    /// array can hold. [Limit: >= 1]
    /// @see The status flags for the query.
    pub const finalizeSlicedFindPathPartial = _1_dtNavMeshQuery_finalizeSlicedFindPathPartial_;

    extern fn _1_dtNavMeshQuery_findPolysAroundCircle_(self: *const dtNavMeshQuery, startRef: dtPolyRef, centerPos: [*c]const f32, radius: f32, filter: [*c]const dtQueryFilter, resultRef: [*c]dtPolyRef, resultParent: [*c]dtPolyRef, resultCost: [*c]f32, resultCount: [*c]c_int, maxResult: c_int) dtStatus;
    /// Finds the polygons along the navigation graph that touch the specified circle.
    ///  @param[in] startRef 		The reference id of the polygon where the search starts.
    ///  @param[in] centerPos 		The center of the search circle. [(x, y, z)]
    ///  @param[in] radius 			The radius of the search circle.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] resultRef 		The reference ids of the polygons touched by the circle. [opt]
    ///  @param[out] resultParent 	The reference ids of the parent polygons for each result.
    ///  								Zero if a result polygon has no parent. [opt]
    ///  @param[out] resultCost 		The search cost from
    ///@p
    /// to the polygon. [opt]
    ///  @param[out] resultCount 		The number of polygons found. [opt]
    ///  @param[in] maxResult 		The maximum number of polygons the result arrays can hold.
    /// @see The status flags for the query.
    pub const findPolysAroundCircle = _1_dtNavMeshQuery_findPolysAroundCircle_;

    extern fn _1_dtNavMeshQuery_findPolysAroundShape_(self: *const dtNavMeshQuery, startRef: dtPolyRef, verts: [*c]const f32, nverts: c_int, filter: [*c]const dtQueryFilter, resultRef: [*c]dtPolyRef, resultParent: [*c]dtPolyRef, resultCost: [*c]f32, resultCount: [*c]c_int, maxResult: c_int) dtStatus;
    /// Finds the polygons along the naviation graph that touch the specified convex polygon.
    ///  @param[in] startRef 		The reference id of the polygon where the search starts.
    ///  @param[in] verts 			The vertices describing the convex polygon. (CCW)
    ///  								[(x, y, z) *
    ///@p
    ///  @param[in] nverts 			The number of vertices in the polygon.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] resultRef 		The reference ids of the polygons touched by the search polygon. [opt]
    ///  @param[out] resultParent 	The reference ids of the parent polygons for each result. Zero if a
    ///  								result polygon has no parent. [opt]
    ///  @param[out] resultCost 		The search cost from the centroid point to the polygon. [opt]
    ///  @param[out] resultCount 		The number of polygons found.
    ///  @param[in] maxResult 		The maximum number of polygons the result arrays can hold.
    /// @see The status flags for the query.
    pub const findPolysAroundShape = _1_dtNavMeshQuery_findPolysAroundShape_;

    extern fn _1_dtNavMeshQuery_getPathFromDijkstraSearch_(self: *const dtNavMeshQuery, endRef: dtPolyRef, path: [*c]dtPolyRef, pathCount: [*c]c_int, maxPath: c_int) dtStatus;
    /// Gets a path from the explored nodes in the previous search.
    ///  @param[in] endRef 		The reference id of the end polygon.
    ///  @param[out] path 		An ordered list of polygon references representing the path. (Start to end.)
    ///  							[(polyRef) *
    ///@p
    ///  @param[out] pathCount 	The number of polygons returned in the
    ///@p
    /// array.
    ///  @param[in] maxPath 		The maximum number of polygons the
    ///@p
    /// array can hold. [Limit: >= 0]
    ///  @see		The status flags. Returns DT_FAILURE | DT_INVALID_PARAM if any parameter is wrong, or if
    ///
    ///@p
    /// was not explored in the previous search. Returns DT_SUCCESS | DT_BUFFER_TOO_SMALL
    ///  				if
    ///@p
    /// cannot contain the entire path. In this case it is filled to capacity with a partial path.
    ///  				Otherwise returns DT_SUCCESS.
    ///  @see		The result of this function depends on the state of the query object. For that reason it should only
    ///  				be used immediately after one of the two Dijkstra searches, findPolysAroundCircle or findPolysAroundShape.
    pub const getPathFromDijkstraSearch = _1_dtNavMeshQuery_getPathFromDijkstraSearch_;

    extern fn _1_dtNavMeshQuery_findNearestPoly_(self: *const dtNavMeshQuery, center: [*c]const f32, halfExtents: [*c]const f32, filter: [*c]const dtQueryFilter, nearestRef: [*c]dtPolyRef, nearestPt: [*c]f32) dtStatus;
    /// Finds the polygon nearest to the specified center point.
    /// [opt] means the specified parameter can be a null pointer, in that case the output parameter will not be set.
    ///
    ///  @param[in] center 		The center of the search box. [(x, y, z)]
    ///  @param[in] halfExtents 	The search distance along each axis. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[out] nearestRef 	The reference id of the nearest polygon. Will be set to 0 if no polygon is found.
    ///  @param[out] nearestPt 	The nearest point on the polygon. Unchanged if no polygon is found. [opt] [(x, y, z)]
    /// @see The status flags for the query.
    pub const findNearestPoly = _1_dtNavMeshQuery_findNearestPoly_;

    extern fn _2_dtNavMeshQuery_findNearestPoly_(self: *const dtNavMeshQuery, center: [*c]const f32, halfExtents: [*c]const f32, filter: [*c]const dtQueryFilter, nearestRef: [*c]dtPolyRef, nearestPt: [*c]f32, isOverPoly: [*c]bool) dtStatus;
    /// Finds the polygon nearest to the specified center point.
    /// [opt] means the specified parameter can be a null pointer, in that case the output parameter will not be set.
    ///
    ///  @param[in] center 		The center of the search box. [(x, y, z)]
    ///  @param[in] halfExtents 	The search distance along each axis. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[out] nearestRef 	The reference id of the nearest polygon. Will be set to 0 if no polygon is found.
    ///  @param[out] nearestPt 	The nearest point on the polygon. Unchanged if no polygon is found. [opt] [(x, y, z)]
    ///  @param[out] isOverPoly  	Set to true if the point's X/Z coordinate lies inside the polygon, false otherwise. Unchanged if no polygon is found. [opt]
    /// @see The status flags for the query.
    pub const findNearestPoly__Overload2 = _2_dtNavMeshQuery_findNearestPoly_;

    extern fn _1_dtNavMeshQuery_queryPolygons_(self: *const dtNavMeshQuery, center: [*c]const f32, halfExtents: [*c]const f32, filter: [*c]const dtQueryFilter, polys: [*c]dtPolyRef, polyCount: [*c]c_int, maxPolys: c_int) dtStatus;
    /// Finds polygons that overlap the search box.
    ///  @param[in] center 		The center of the search box. [(x, y, z)]
    ///  @param[in] halfExtents 		The search distance along each axis. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[out] polys 		The reference ids of the polygons that overlap the query box.
    ///  @param[out] polyCount 	The number of polygons in the search result.
    ///  @param[in] maxPolys 	The maximum number of polygons the search result can hold.
    /// @see The status flags for the query.
    pub const queryPolygons = _1_dtNavMeshQuery_queryPolygons_;

    extern fn _2_dtNavMeshQuery_queryPolygons_(self: *const dtNavMeshQuery, center: [*c]const f32, halfExtents: [*c]const f32, filter: [*c]const dtQueryFilter, query: [*c]dtPolyQuery) dtStatus;
    /// Finds polygons that overlap the search box.
    ///  @param[in] center 		The center of the search box. [(x, y, z)]
    ///  @param[in] halfExtents 		The search distance along each axis. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[in] query 		The query. Polygons found will be batched together and passed to this query.
    pub const queryPolygons__Overload2 = _2_dtNavMeshQuery_queryPolygons_;

    extern fn _1_dtNavMeshQuery_findLocalNeighbourhood_(self: *const dtNavMeshQuery, startRef: dtPolyRef, centerPos: [*c]const f32, radius: f32, filter: [*c]const dtQueryFilter, resultRef: [*c]dtPolyRef, resultParent: [*c]dtPolyRef, resultCount: [*c]c_int, maxResult: c_int) dtStatus;
    /// Finds the non-overlapping navigation polygons in the local neighbourhood around the center position.
    ///  @param[in] startRef 		The reference id of the polygon where the search starts.
    ///  @param[in] centerPos 		The center of the query circle. [(x, y, z)]
    ///  @param[in] radius 			The radius of the query circle.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] resultRef 		The reference ids of the polygons touched by the circle.
    ///  @param[out] resultParent 	The reference ids of the parent polygons for each result.
    ///  								Zero if a result polygon has no parent. [opt]
    ///  @param[out] resultCount 		The number of polygons found.
    ///  @param[in] maxResult 		The maximum number of polygons the result arrays can hold.
    /// @see The status flags for the query.
    pub const findLocalNeighbourhood = _1_dtNavMeshQuery_findLocalNeighbourhood_;

    extern fn _1_dtNavMeshQuery_moveAlongSurface_(self: *const dtNavMeshQuery, startRef: dtPolyRef, startPos: [*c]const f32, endPos: [*c]const f32, filter: [*c]const dtQueryFilter, resultPos: [*c]f32, visited: [*c]dtPolyRef, visitedCount: [*c]c_int, maxVisitedSize: c_int) dtStatus;
    /// Moves from the start to the end position constrained to the navigation mesh.
    ///  @param[in] startRef 		The reference id of the start polygon.
    ///  @param[in] startPos 		A position of the mover within the start polygon. [(x, y, x)]
    ///  @param[in] endPos 			The desired end position of the mover. [(x, y, z)]
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] resultPos 		The result position of the mover. [(x, y, z)]
    ///  @param[out] visited 			The reference ids of the polygons visited during the move.
    ///  @param[out] visitedCount 	The number of polygons visited during the move.
    ///  @param[in] maxVisitedSize 	The maximum number of polygons the
    ///@p
    /// array can hold.
    /// @see The status flags for the query.
    pub const moveAlongSurface = _1_dtNavMeshQuery_moveAlongSurface_;

    extern fn _1_dtNavMeshQuery_raycast_(self: *const dtNavMeshQuery, startRef: dtPolyRef, startPos: [*c]const f32, endPos: [*c]const f32, filter: [*c]const dtQueryFilter, t: [*c]f32, hitNormal: [*c]f32, path: [*c]dtPolyRef, pathCount: [*c]c_int, maxPath: c_int) dtStatus;
    /// Casts a 'walkability' ray along the surface of the navigation mesh from
    /// the start position toward the end position.
    /// @see A wrapper around raycast(..., RaycastHit*). Retained for backward compatibility.
    ///  @param[in] startRef 	The reference id of the start polygon.
    ///  @param[in] startPos 	A position within the start polygon representing
    ///  							the start of the ray. [(x, y, z)]
    ///  @param[in] endPos 		The position to cast the ray toward. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[out] t 			The hit parameter. (FLT_MAX if no wall hit.)
    ///  @param[out] hitNormal 	The normal of the nearest wall hit. [(x, y, z)]
    ///  @param[out] path 		The reference ids of the visited polygons. [opt]
    ///  @param[out] pathCount 	The number of visited polygons. [opt]
    ///  @param[in] maxPath 		The maximum number of polygons the
    ///@p
    /// array can hold.
    /// @see The status flags for the query.
    pub const raycast = _1_dtNavMeshQuery_raycast_;

    extern fn _2_dtNavMeshQuery_raycast_(self: *const dtNavMeshQuery, startRef: dtPolyRef, startPos: [*c]const f32, endPos: [*c]const f32, filter: [*c]const dtQueryFilter, options: c_uint, hit: [*c]dtRaycastHit, prevRef: dtPolyRef) dtStatus;
    /// Casts a 'walkability' ray along the surface of the navigation mesh from
    /// the start position toward the end position.
    ///  @param[in] startRef 	The reference id of the start polygon.
    ///  @param[in] startPos 	A position within the start polygon representing
    ///  							the start of the ray. [(x, y, z)]
    ///  @param[in] endPos 		The position to cast the ray toward. [(x, y, z)]
    ///  @param[in] filter 		The polygon filter to apply to the query.
    ///  @param[in] options 		govern how the raycast behaves. See dtRaycastOptions
    ///  @param[out] hit 			Pointer to a raycast hit structure which will be filled by the results.
    ///  @param[in] prevRef 		parent of start ref. Used during for cost calculation [opt]
    /// @see The status flags for the query.
    pub fn raycast__Overload2(
        self: *const dtNavMeshQuery,
        startRef: dtPolyRef,
        startPos: [*c]const f32,
        endPos: [*c]const f32,
        filter: [*c]const dtQueryFilter,
        options: c_uint,
        hit: [*c]dtRaycastHit,
        __opt: struct {
            prevRef: dtPolyRef = @as(dtPolyRef, @intCast(0)),
        },
    ) dtStatus {
        return _2_dtNavMeshQuery_raycast_(self, startRef, startPos, endPos, filter, options, hit, __opt.prevRef);
    }

    extern fn _1_dtNavMeshQuery_findDistanceToWall_(self: *const dtNavMeshQuery, startRef: dtPolyRef, centerPos: [*c]const f32, maxRadius: f32, filter: [*c]const dtQueryFilter, hitDist: [*c]f32, hitPos: [*c]f32, hitNormal: [*c]f32) dtStatus;
    /// Finds the distance from the specified position to the nearest polygon wall.
    ///  @param[in] startRef 		The reference id of the polygon containing
    ///@p
    ///  @param[in] centerPos 		The center of the search circle. [(x, y, z)]
    ///  @param[in] maxRadius 		The radius of the search circle.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] hitDist 			The distance to the nearest wall from
    ///@p
    ///  @param[out] hitPos 			The nearest position on the wall that was hit. [(x, y, z)]
    ///  @param[out] hitNormal 		The normalized ray formed from the wall point to the
    ///  								source point. [(x, y, z)]
    /// @see The status flags for the query.
    pub const findDistanceToWall = _1_dtNavMeshQuery_findDistanceToWall_;

    extern fn _1_dtNavMeshQuery_getPolyWallSegments_(self: *const dtNavMeshQuery, ref: dtPolyRef, filter: [*c]const dtQueryFilter, segmentVerts: [*c]f32, segmentRefs: [*c]dtPolyRef, segmentCount: [*c]c_int, maxSegments: c_int) dtStatus;
    /// Returns the segments for the specified polygon, optionally including portals.
    ///  @param[in] ref 				The reference id of the polygon.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[out] segmentVerts 	The segments. [(ax, ay, az, bx, by, bz) * segmentCount]
    ///  @param[out] segmentRefs 		The reference ids of each segment's neighbor polygon.
    ///  								Or zero if the segment is a wall. [opt] [(parentRef) *
    ///@p
    ///
    ///  @param[out] segmentCount 	The number of segments returned.
    ///  @param[in] maxSegments 		The maximum number of segments the result arrays can hold.
    /// @see The status flags for the query.
    pub const getPolyWallSegments = _1_dtNavMeshQuery_getPolyWallSegments_;

    extern fn _1_dtNavMeshQuery_findRandomPoint_(self: *const dtNavMeshQuery, filter: [*c]const dtQueryFilter, frand: ?*const fn () callconv(.C) f32, randomRef: [*c]dtPolyRef, randomPt: [*c]f32) dtStatus;
    /// Returns random location on navmesh.
    /// Polygons are chosen weighted by area. The search runs in linear related to number of polygon.
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[in] frand 			Function returning a random number [0..1).
    ///  @param[out] randomRef 		The reference id of the random location.
    ///  @param[out] randomPt 		The random location.
    /// @see The status flags for the query.
    pub const findRandomPoint = _1_dtNavMeshQuery_findRandomPoint_;

    extern fn _1_dtNavMeshQuery_findRandomPointAroundCircle_(self: *const dtNavMeshQuery, startRef: dtPolyRef, centerPos: [*c]const f32, maxRadius: f32, filter: [*c]const dtQueryFilter, frand: ?*const fn () callconv(.C) f32, randomRef: [*c]dtPolyRef, randomPt: [*c]f32) dtStatus;
    /// Returns random location on navmesh within the reach of specified location.
    /// Polygons are chosen weighted by area. The search runs in linear related to number of polygon.
    /// The location is not exactly constrained by the circle, but it limits the visited polygons.
    ///  @param[in] startRef 		The reference id of the polygon where the search starts.
    ///  @param[in] centerPos 		The center of the search circle. [(x, y, z)]
    ///  @param[in] maxRadius 		The radius of the search circle. [Units: wu]
    ///  @param[in] filter 			The polygon filter to apply to the query.
    ///  @param[in] frand 			Function returning a random number [0..1).
    ///  @param[out] randomRef 		The reference id of the random location.
    ///  @param[out] randomPt 		The random location. [(x, y, z)]
    /// @see The status flags for the query.
    pub const findRandomPointAroundCircle = _1_dtNavMeshQuery_findRandomPointAroundCircle_;

    extern fn _1_dtNavMeshQuery_closestPointOnPoly_(self: *const dtNavMeshQuery, ref: dtPolyRef, pos: [*c]const f32, closest: [*c]f32, posOverPoly: [*c]bool) dtStatus;
    /// Finds the closest point on the specified polygon.
    ///  @param[in] ref 			The reference id of the polygon.
    ///  @param[in] pos 			The position to check. [(x, y, z)]
    ///  @param[out] closest 		The closest point on the polygon. [(x, y, z)]
    ///  @param[out] posOverPoly 	True of the position is over the polygon.
    /// @see The status flags for the query.
    pub const closestPointOnPoly = _1_dtNavMeshQuery_closestPointOnPoly_;

    extern fn _1_dtNavMeshQuery_closestPointOnPolyBoundary_(self: *const dtNavMeshQuery, ref: dtPolyRef, pos: [*c]const f32, closest: [*c]f32) dtStatus;
    /// Returns a point on the boundary closest to the source point if the source point is outside the
    /// polygon's xz-bounds.
    ///  @param[in] ref 			The reference id to the polygon.
    ///  @param[in] pos 			The position to check. [(x, y, z)]
    ///  @param[out] closest 		The closest point. [(x, y, z)]
    /// @see The status flags for the query.
    pub const closestPointOnPolyBoundary = _1_dtNavMeshQuery_closestPointOnPolyBoundary_;

    extern fn _1_dtNavMeshQuery_getPolyHeight_(self: *const dtNavMeshQuery, ref: dtPolyRef, pos: [*c]const f32, height: [*c]f32) dtStatus;
    /// Gets the height of the polygon at the provided position using the height detail. (Most accurate.)
    ///  @param[in] ref 			The reference id of the polygon.
    ///  @param[in] pos 			A position within the xz-bounds of the polygon. [(x, y, z)]
    ///  @param[out] height 		The height at the surface of the polygon.
    /// @see The status flags for the query.
    pub const getPolyHeight = _1_dtNavMeshQuery_getPolyHeight_;

    extern fn _1_dtNavMeshQuery_isValidPolyRef_(self: *const dtNavMeshQuery, ref: dtPolyRef, filter: [*c]const dtQueryFilter) bool;
    /// Returns true if the polygon reference is valid and passes the filter restrictions.
    ///  @param[in] ref 			The polygon reference to check.
    ///  @param[in] filter 		The filter to apply.
    pub const isValidPolyRef = _1_dtNavMeshQuery_isValidPolyRef_;

    extern fn _1_dtNavMeshQuery_isInClosedList_(self: *const dtNavMeshQuery, ref: dtPolyRef) bool;
    /// Returns true if the polygon reference is in the closed list.
    ///  @param[in] ref 		The reference id of the polygon to check.
    /// @see True if the polygon is in closed list.
    pub const isInClosedList = _1_dtNavMeshQuery_isInClosedList_;

    extern fn _1_dtNavMeshQuery_getNodePool_(self: *const dtNavMeshQuery) [*c]dtNodePool;
    /// Gets the node pool.
    /// @see The node pool.
    pub const getNodePool = _1_dtNavMeshQuery_getNodePool_;

    extern fn _1_dtNavMeshQuery_getAttachedNavMesh_(self: *const dtNavMeshQuery) [*c]const dtNavMesh;
    /// Gets the navigation mesh the query object is using.
    /// @see The navigation mesh the query object is using.
    pub const getAttachedNavMesh = _1_dtNavMeshQuery_getAttachedNavMesh_;

    pub const dtQueryData = extern struct {
        status: dtStatus,
        lastBestNode: [*c]dtNode,
        lastBestNodeCost: f32,
        startRef: dtPolyRef,
        endRef: dtPolyRef,
        startPos: [3]f32,
        endPos: [3]f32,
        filter: [*c]const dtQueryFilter,
        options: c_uint,
        raycastLimitSqr: f32,
    };

    // opaques

    const dtNodePool = anyopaque;
    const dtNode = anyopaque;
    const dtNodeQueue = anyopaque;
};

extern fn _1_dtAllocNavMeshQuery_() [*c]dtNavMeshQuery;
/// Allocates a query object using the Detour allocator.
/// @see An allocated query object, or null on failure.
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtAllocNavMeshQuery = _1_dtAllocNavMeshQuery_;

extern fn _1_dtFreeNavMeshQuery_(query: [*c]dtNavMeshQuery) void;
/// Frees the specified query object using the Detour allocator.
///  @param[in] query 		A query object allocated using #dtAllocNavMeshQuery
/// @UntranspiledVerbatimLineCommentCommand detour
pub const dtFreeNavMeshQuery = _1_dtFreeNavMeshQuery_;
