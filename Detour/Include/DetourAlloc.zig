// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

/// Provides hint values to the memory allocator on how long the
/// memory is expected to be used.
pub const dtAllocHint = extern struct {
    bits: c_int = 0,

    /// Memory persist after a function call.
    pub const DT_ALLOC_PERM: dtAllocHint = .{ .bits = 0 };
    /// Memory used temporarily within a function.
    pub const DT_ALLOC_TEMP: dtAllocHint = .{ .bits = 1 };

    // pub usingnamespace cpp.FlagsMixin(dtAllocHint);
};

/// A memory allocation function.
///  @param[in] size 			The size, in bytes of memory, to allocate.
///  @param[in] rcAllocHint 	A hint to the allocator on how long the memory is expected to be in use.
///  @see A pointer to the beginning of the allocated memory block, or null if the allocation failed.
///  @see dtAllocSetCustom
pub const dtAllocFunc = fn (usize, dtAllocHint) callconv(.C) ?*anyopaque;

/// A memory deallocation function.
///  @param[in] ptr 		A pointer to a memory block previously allocated using #dtAllocFunc.
/// @see dtAllocSetCustom
pub const dtFreeFunc = fn (?*anyopaque) callconv(.C) void;

extern fn _1_dtAllocSetCustom_(allocFunc: [*c]dtAllocFunc, freeFunc: [*c]dtFreeFunc) void;
/// Sets the base custom allocation functions to be used by Detour.
///  @param[in] allocFunc 	The memory allocation function to be used by #dtAlloc
///  @param[in] freeFunc 	The memory de-allocation function to be used by #dtFree
pub const dtAllocSetCustom = _1_dtAllocSetCustom_;

extern fn _1_dtAlloc_(size: usize, hint: dtAllocHint) ?*anyopaque;
/// Allocates a memory block.
///  @param[in] size 	The size, in bytes of memory, to allocate.
///  @param[in] hint 	A hint to the allocator on how long the memory is expected to be in use.
///  @see A pointer to the beginning of the allocated memory block, or null if the allocation failed.
/// @see dtFree
pub const dtAlloc = _1_dtAlloc_;

extern fn _1_dtFree_(ptr: ?*anyopaque) void;
/// Deallocates a memory block.
///  @param[in] ptr 		A pointer to a memory block previously allocated using #dtAlloc.
/// @see dtAlloc
pub const dtFree = _1_dtFree_;
