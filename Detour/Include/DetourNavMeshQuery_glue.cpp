// auto generated by c2z
#include <new>
#include "DetourNavMeshQuery.h"

extern "C" void _1_dtQueryFilter_init_(::dtQueryFilter* self) { new (self) ::dtQueryFilter(); }
extern "C" bool _1_dtQueryFilter_passFilter_(const ::dtQueryFilter *self, const dtPolyRef ref, const dtMeshTile * tile, const dtPoly * poly) { return self->passFilter(ref, tile, poly); }
extern "C" float _1_dtQueryFilter_getCost_(const ::dtQueryFilter *self, const float * pa, const float * pb, const dtPolyRef prevRef, const dtMeshTile * prevTile, const dtPoly * prevPoly, const dtPolyRef curRef, const dtMeshTile * curTile, const dtPoly * curPoly, const dtPolyRef nextRef, const dtMeshTile * nextTile, const dtPoly * nextPoly) { return self->getCost(pa, pb, prevRef, prevTile, prevPoly, curRef, curTile, curPoly, nextRef, nextTile, nextPoly); }
extern "C" float _1_dtQueryFilter_getAreaCost_(const ::dtQueryFilter *self, const int i) { return self->getAreaCost(i); }
extern "C" void _1_dtQueryFilter_setAreaCost_(::dtQueryFilter* self, const int i, const float cost) { self->setAreaCost(i, cost); }
extern "C" unsigned short _1_dtQueryFilter_getIncludeFlags_(const ::dtQueryFilter *self) { return self->getIncludeFlags(); }
extern "C" void _1_dtQueryFilter_setIncludeFlags_(::dtQueryFilter* self, const unsigned short flags) { self->setIncludeFlags(flags); }
extern "C" unsigned short _1_dtQueryFilter_getExcludeFlags_(const ::dtQueryFilter *self) { return self->getExcludeFlags(); }
extern "C" void _1_dtQueryFilter_setExcludeFlags_(::dtQueryFilter* self, const unsigned short flags) { self->setExcludeFlags(flags); }
extern "C" void _1_dtPolyQuery_deinit_(::dtPolyQuery *self) { self->~dtPolyQuery(); }
extern "C" void _1_dtPolyQuery_process_(::dtPolyQuery* self, const dtMeshTile * tile, dtPoly ** polys, dtPolyRef * refs, int count) { self->process(tile, polys, refs, count); }
extern "C" void _1_dtNavMeshQuery_init_(::dtNavMeshQuery* self) { new (self) ::dtNavMeshQuery(); }
extern "C" void _1_dtNavMeshQuery_deinit_(::dtNavMeshQuery *self) { self->~dtNavMeshQuery(); }
extern "C" dtStatus _2_dtNavMeshQuery_init_(::dtNavMeshQuery* self, const dtNavMesh * nav, const int maxNodes) { return self->init(nav, maxNodes); }
extern "C" dtStatus _1_dtNavMeshQuery_findPath_(const ::dtNavMeshQuery *self, dtPolyRef startRef, dtPolyRef endRef, const float * startPos, const float * endPos, const dtQueryFilter * filter, dtPolyRef * path, int * pathCount, const int maxPath) { return self->findPath(startRef, endRef, startPos, endPos, filter, path, pathCount, maxPath); }
extern "C" dtStatus _1_dtNavMeshQuery_findStraightPath_(const ::dtNavMeshQuery *self, const float * startPos, const float * endPos, const dtPolyRef * path, const int pathSize, float * straightPath, unsigned char * straightPathFlags, dtPolyRef * straightPathRefs, int * straightPathCount, const int maxStraightPath, const int options) { return self->findStraightPath(startPos, endPos, path, pathSize, straightPath, straightPathFlags, straightPathRefs, straightPathCount, maxStraightPath, options); }
extern "C" dtStatus _1_dtNavMeshQuery_initSlicedFindPath_(::dtNavMeshQuery* self, dtPolyRef startRef, dtPolyRef endRef, const float * startPos, const float * endPos, const dtQueryFilter * filter, const unsigned int options) { return self->initSlicedFindPath(startRef, endRef, startPos, endPos, filter, options); }
extern "C" dtStatus _1_dtNavMeshQuery_updateSlicedFindPath_(::dtNavMeshQuery* self, const int maxIter, int * doneIters) { return self->updateSlicedFindPath(maxIter, doneIters); }
extern "C" dtStatus _1_dtNavMeshQuery_finalizeSlicedFindPath_(::dtNavMeshQuery* self, dtPolyRef * path, int * pathCount, const int maxPath) { return self->finalizeSlicedFindPath(path, pathCount, maxPath); }
extern "C" dtStatus _1_dtNavMeshQuery_finalizeSlicedFindPathPartial_(::dtNavMeshQuery* self, const dtPolyRef * existing, const int existingSize, dtPolyRef * path, int * pathCount, const int maxPath) { return self->finalizeSlicedFindPathPartial(existing, existingSize, path, pathCount, maxPath); }
extern "C" dtStatus _1_dtNavMeshQuery_findPolysAroundCircle_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * centerPos, const float radius, const dtQueryFilter * filter, dtPolyRef * resultRef, dtPolyRef * resultParent, float * resultCost, int * resultCount, const int maxResult) { return self->findPolysAroundCircle(startRef, centerPos, radius, filter, resultRef, resultParent, resultCost, resultCount, maxResult); }
extern "C" dtStatus _1_dtNavMeshQuery_findPolysAroundShape_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * verts, const int nverts, const dtQueryFilter * filter, dtPolyRef * resultRef, dtPolyRef * resultParent, float * resultCost, int * resultCount, const int maxResult) { return self->findPolysAroundShape(startRef, verts, nverts, filter, resultRef, resultParent, resultCost, resultCount, maxResult); }
extern "C" dtStatus _1_dtNavMeshQuery_getPathFromDijkstraSearch_(const ::dtNavMeshQuery *self, dtPolyRef endRef, dtPolyRef * path, int * pathCount, int maxPath) { return self->getPathFromDijkstraSearch(endRef, path, pathCount, maxPath); }
extern "C" dtStatus _1_dtNavMeshQuery_findNearestPoly_(const ::dtNavMeshQuery *self, const float * center, const float * halfExtents, const dtQueryFilter * filter, dtPolyRef * nearestRef, float * nearestPt) { return self->findNearestPoly(center, halfExtents, filter, nearestRef, nearestPt); }
extern "C" dtStatus _2_dtNavMeshQuery_findNearestPoly_(const ::dtNavMeshQuery *self, const float * center, const float * halfExtents, const dtQueryFilter * filter, dtPolyRef * nearestRef, float * nearestPt, bool * isOverPoly) { return self->findNearestPoly(center, halfExtents, filter, nearestRef, nearestPt, isOverPoly); }
extern "C" dtStatus _1_dtNavMeshQuery_queryPolygons_(const ::dtNavMeshQuery *self, const float * center, const float * halfExtents, const dtQueryFilter * filter, dtPolyRef * polys, int * polyCount, const int maxPolys) { return self->queryPolygons(center, halfExtents, filter, polys, polyCount, maxPolys); }
extern "C" dtStatus _2_dtNavMeshQuery_queryPolygons_(const ::dtNavMeshQuery *self, const float * center, const float * halfExtents, const dtQueryFilter * filter, dtPolyQuery * query) { return self->queryPolygons(center, halfExtents, filter, query); }
extern "C" dtStatus _1_dtNavMeshQuery_findLocalNeighbourhood_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * centerPos, const float radius, const dtQueryFilter * filter, dtPolyRef * resultRef, dtPolyRef * resultParent, int * resultCount, const int maxResult) { return self->findLocalNeighbourhood(startRef, centerPos, radius, filter, resultRef, resultParent, resultCount, maxResult); }
extern "C" dtStatus _1_dtNavMeshQuery_moveAlongSurface_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * startPos, const float * endPos, const dtQueryFilter * filter, float * resultPos, dtPolyRef * visited, int * visitedCount, const int maxVisitedSize) { return self->moveAlongSurface(startRef, startPos, endPos, filter, resultPos, visited, visitedCount, maxVisitedSize); }
extern "C" dtStatus _1_dtNavMeshQuery_raycast_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * startPos, const float * endPos, const dtQueryFilter * filter, float * t, float * hitNormal, dtPolyRef * path, int * pathCount, const int maxPath) { return self->raycast(startRef, startPos, endPos, filter, t, hitNormal, path, pathCount, maxPath); }
extern "C" dtStatus _2_dtNavMeshQuery_raycast_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * startPos, const float * endPos, const dtQueryFilter * filter, const unsigned int options, dtRaycastHit * hit, dtPolyRef prevRef) { return self->raycast(startRef, startPos, endPos, filter, options, hit, prevRef); }
extern "C" dtStatus _1_dtNavMeshQuery_findDistanceToWall_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float * hitDist, float * hitPos, float * hitNormal) { return self->findDistanceToWall(startRef, centerPos, maxRadius, filter, hitDist, hitPos, hitNormal); }
extern "C" dtStatus _1_dtNavMeshQuery_getPolyWallSegments_(const ::dtNavMeshQuery *self, dtPolyRef ref, const dtQueryFilter * filter, float * segmentVerts, dtPolyRef * segmentRefs, int * segmentCount, const int maxSegments) { return self->getPolyWallSegments(ref, filter, segmentVerts, segmentRefs, segmentCount, maxSegments); }
extern "C" dtStatus _1_dtNavMeshQuery_findRandomPoint_(const ::dtNavMeshQuery *self, const dtQueryFilter * filter, float (*frand)(), dtPolyRef * randomRef, float * randomPt) { return self->findRandomPoint(filter, frand, randomRef, randomPt); }
extern "C" dtStatus _1_dtNavMeshQuery_findRandomPointAroundCircle_(const ::dtNavMeshQuery *self, dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float (*frand)(), dtPolyRef * randomRef, float * randomPt) { return self->findRandomPointAroundCircle(startRef, centerPos, maxRadius, filter, frand, randomRef, randomPt); }
extern "C" dtStatus _1_dtNavMeshQuery_closestPointOnPoly_(const ::dtNavMeshQuery *self, dtPolyRef ref, const float * pos, float * closest, bool * posOverPoly) { return self->closestPointOnPoly(ref, pos, closest, posOverPoly); }
extern "C" dtStatus _1_dtNavMeshQuery_closestPointOnPolyBoundary_(const ::dtNavMeshQuery *self, dtPolyRef ref, const float * pos, float * closest) { return self->closestPointOnPolyBoundary(ref, pos, closest); }
extern "C" dtStatus _1_dtNavMeshQuery_getPolyHeight_(const ::dtNavMeshQuery *self, dtPolyRef ref, const float * pos, float * height) { return self->getPolyHeight(ref, pos, height); }
extern "C" bool _1_dtNavMeshQuery_isValidPolyRef_(const ::dtNavMeshQuery *self, dtPolyRef ref, const dtQueryFilter * filter) { return self->isValidPolyRef(ref, filter); }
extern "C" bool _1_dtNavMeshQuery_isInClosedList_(const ::dtNavMeshQuery *self, dtPolyRef ref) { return self->isInClosedList(ref); }
extern "C" class dtNodePool * _1_dtNavMeshQuery_getNodePool_(const ::dtNavMeshQuery *self) { return self->getNodePool(); }
extern "C" const dtNavMesh * _1_dtNavMeshQuery_getAttachedNavMesh_(const ::dtNavMeshQuery *self) { return self->getAttachedNavMesh(); }
extern "C" dtNavMeshQuery * _1_dtAllocNavMeshQuery_() { return ::dtAllocNavMeshQuery(); }
extern "C" void _1_dtFreeNavMeshQuery_(dtNavMeshQuery * query) { ::dtFreeNavMeshQuery(query); }
